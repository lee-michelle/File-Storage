package com.enableets.edu.filestorage;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.InputStream;import java.math.BigInteger;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;import org.slf4j.Logger;import org.slf4j.LoggerFactory;/** * 功能：MD5加密处理核心文件 *  * @author * @since 2018/6/11 * */public class Md5Encrypt {	/**	 * 日志	 */	private static final Logger LOGGER = LoggerFactory.getLogger(Md5Encrypt.class);	/**	 * Used building output as Hex	 */	private static final char[] DIGITS = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };	/**	 * 	 * @param md5Str	 *            String	 * @return String	 */	private static String checkMd5Str(String md5Str) {		while (md5Str.length() < 32) {			md5Str = "0" + md5Str;		}		return md5Str;	}	/**	 * 对字符串进行MD5加密	 * 	 * @param text	 *            明文	 * 	 * @return 密文	 */	public static String md5(String text) {		MessageDigest msgDigest = null;		try {			msgDigest = MessageDigest.getInstance("MD5");		} catch (NoSuchAlgorithmException e) {			throw new IllegalStateException("System doesn't support MD5 algorithm.");		}		msgDigest.update(text.getBytes()); // 注意改接口是按照指定编码形式加密		byte[] bytes = msgDigest.digest();		String md5Str = new String(encodeHex(bytes));		return checkMd5Str(md5Str);	}	/**	 * 	 * @param data	 *            byte[	 * @return char[]	 */	public static char[] encodeHex(byte[] data) {		int l = data.length;		char[] out = new char[l << 1];		// two characters form the hex value.		for (int i = 0, j = 0; i < l; i++) {			out[j++] = DIGITS[(0xF0 & data[i]) >>> 4];			out[j++] = DIGITS[0x0F & data[i]];		}		return out;	}	/**	 * 	 * @param file	 *            File	 * @return String	 */	public static String getFileMD5(File file) {		try {			return getFileMD5(new FileInputStream(file));		} catch (FileNotFoundException e) {			LOGGER.error("", e);			return null;		}	}	/**	 * 生成MD5值	 * 	 * @param is	 *            待MD5的流	 * @return MD5后的字符串	 */	public static String getFileMD5(InputStream is) {		MessageDigest digest = null;		byte buffer[] = new byte[1024];		int len;		try {			digest = MessageDigest.getInstance("MD5");			while ((len = is.read(buffer, 0, 1024)) != -1) {				digest.update(buffer, 0, len);			}			is.close();		} catch (Throwable e) {			LOGGER.error("", e);			return null;		}		BigInteger bigInt = new BigInteger(1, digest.digest());		return checkMd5Str(bigInt.toString(16));	}}